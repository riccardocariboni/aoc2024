;;;; aoc2024-d07.lisp

(in-package #:aoc2024-d07)

(defun parse-input (file)
  (let ((in (uiop:read-file-lines file)))
    in))

(defun parse-line (line)
  (let ((result nil)
	(operators nil)
	(part (uiop:split-string line :separator '(#\:))))
    (setf result (parse-integer (first part)))
    (dolist (o (rest (uiop:split-string (second part))))
      (push (parse-integer o) operators))
    (list result (reverse operators))))

(defun eval-left-to-right (numbers operators)
  (reduce (lambda (acc operator-and-num)
            (destructuring-bind (operator num) operator-and-num
              (funcall operator acc num)))
          (mapcar #'list operators (rest numbers))
          :initial-value (first numbers)))

(defun generate-operator-combinations (num-ops)
  (if (zerop num-ops)
      (list nil)
      (mapcan (lambda (tail)
                (mapcar (lambda (op) (cons op tail))
                        (list #'+ #'*)))
              (generate-operator-combinations (1- num-ops)))))


(defun check-target (target numbers)
  (let ((num-ops (1- (length numbers))))
    (some (lambda (operators)
            (let ((result (eval-left-to-right numbers operators)))
              (when (= result target) t)))
          (generate-operator-combinations num-ops))))

(defun solve-p1 (file)
  (let ((lines (parse-input file))
	(sum 0))
    (dolist (line lines)
      (let* ((pline (parse-line line))
	     (res (first pline))
	     (nums (second pline)))
	(if (check-target res nums)
	    (setf sum (+ sum res)))))
    sum))

(defun || (a b)
	   (parse-integer (concatenate 'string (write-to-string a) (write-to-string b))))

(defun generate-operator-combinations-2 (num-ops)
  (if (zerop num-ops)
      (list nil)
      (mapcan (lambda (tail)
                (mapcar (lambda (op) (cons op tail))
                        (list #'+ #'* #'||)))
              (generate-operator-combinations-2 (1- num-ops)))))

(defun check-target-2 (target numbers)
  (let ((num-ops (1- (length numbers))))
    (some (lambda (operators)
            (let ((result (eval-left-to-right numbers operators)))
              (when (= result target) t)))
          (generate-operator-combinations-2 num-ops))))

(defun solve-p2 (file)
  (let ((lines (parse-input file))
	(sum 0))
    (dolist (line lines)
      (let* ((pline (parse-line line))
	     (res (first pline))
	     (nums (second pline)))
	(if (check-target-2 res nums)
	    (setf sum (+ sum res)))))
    sum))
